IDLE
LD
INC
WAIT_IN - state to wait for valid_in (input word ready) if neccesary. Unlikely as input has at least 4 cycles to prepare new word.
LD_FINAL - reset word register instead of loading to ensure zeros for final packet out if neccesary. Also assert eop_out.


keep data_load asserted in idle state so no latency to first packet out when sop_in is asserted. More power consumption in idle?
figure out count threshold to load new word on correct cycle. this is transition INC->LD
threshold for count comparison can be LUT for speed increase if this is critical path in state machine.
If need to wait for valid_in, need to check in INC state and keep ready_out asserted until valid_in detected, possibly transition to WAIT
Count set to 6 and adresses offset down from there makes verilog code easier, but could be achieved in hardware with same complexity by starting count at 0.

Could not register data_in. Would require trusting data_in, potential speed penalty if any delay in delivery of data_in. Would require different logic for zero bits on last packet out if necessary. Would add additional cycles if word is not ready first cycle after requested.

Possible errors:
second sop_in before eop_in
simultaneous sop_in and eop_in
miss a word if it is first cycle after reset

TODO
register FSM outputs see article from scott. speed increase as no combinational state machine logic will add to critical path in datapath.
fix timing of eop_out, probably have to add extra state.
parameterize for output packet width
parameterize for input packet bit count
